    1、C#变量分为两种类型：值类型和引用类型，值类型分配在栈区，引用类型分配在堆区，GC关注引用类型

　　2、GC卡顿原因：堆内存垃圾回收，向系统申请新的堆内存

　　3、GC触发条件：堆内存分配而当内存不足时、按频率自动触发、手动强行触发（一般用在场景切换）

　　4、GC负面效果：内存碎片（导致内存变大，GC触发更加频繁）、游戏顿卡

　　5、GC优化方向：减少GC次数、降低单次GC运行时间、场景切换时主动GC

　　6、GC优化策略：减少对内存分配次数和引用次数、降低堆内存分配和回收频率

　　7、善用缓存：对有堆内存分配的函数，缓存其调用结果，不要反复去调用

　　8、清除列表：而不要每次都去new一个新的列表

　　9、用对象池：必用

　　10、慎用串拼接：缓存、Text组件拆分、使用StringBuild、Debug.Log接口封装（打Conditional标签）

　　11、警惕Unity函数调用：GameObject.name、GameObject.tag、FindObjectsOfType<T>()等众多函数都有堆内存分配，实测为准

　　12、避免装箱：慎用object形参、多用泛型版本（如List<T>）等，这里的细节问题很多，实测为准

　　13、警惕协程：StartCoroutine有GC、yield return带返回值有GC、yield return new xxx有GC（最好自己做一套协程管理）

　　14、foreach：unity5.5之前版本有GC，使用for循环或者获取迭代器

　　15、减少引用：建立管理类统一管理，使用ID作为访问token

　　16、慎用LINQ：这东西最好不用，GC很高

　　17、结构体数组：如果结构体中含有引用类型变量，对结构体数组进行拆分，避免GC时遍历所有结构体成员

　　18、在游戏空闲（如场景切换时）强制执行GC
