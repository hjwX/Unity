Cull:剔除方式

    Off:不剔除
    Back:剔除相机看不见的面
    Front:剔除相机可以看见的面

正反点 渲染出的像素颜色是一样的 

GPU在渲染一个三角形的时候 是按照顶点来渲染的
而unity是根据三角形顶点的顺序来确定三角形的正反面，如果顶点是顺时针的话那就是正面，如果顶点是逆时针的话那就是反面
Cull Front就是来剔除正面，也就是顶点是顺时针的面
     Back 就是剔除反面，顶点是逆时针的面

对于一个给定的三角形，设三角形所在平面的方程为 n*p + d = 0 n为平面的法向量 d是一个常量 p为平面上点
对于给定的观察点E 若 dot(n, (p-E)) > 0 则表示平面在该点是可见的
若dot(n， (p -E)) < 0 则是不看见的

在Unity中所谓的顺时针方向，是我们默认看向Z轴正方向的时候确定的，这个时候我们假定观察点原点(0, 0, 0)
对于给定的三个点（1,1,1），（1,2,1），（2,1,1）我们按左手定则确定平面的法线是指向Z轴负方向的，这个时候dot(n, (p-E)) 明显是小于0的
按理说这个面是不看见的了，但是当我们把点转换了相机空间的时候,由于相机空间使用的是右手坐标系，所有根据右手定则平面的法向量在相机空间其实也是指向Z轴的负方向的但是这个时候dot(n, (p-E))是大于0的所以是可见的


可以通过GL.invertCull = true 来反转剔除的方式