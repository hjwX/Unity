基本机构也是一样的：
	Shader "Custom RP/Unlit" {
		Properties{}
		SubShader{
			Pass{}
		}
	}
	
1.URP可以使用CG编写的Shader程序也可以使用HLSL编写的程序，但是推荐使用HLSL
2.multi_compile_instancing指令，shader支不支持Gpuinstancing

Shader "Custom RP/Unlit" {
		Properties{
			_Color("Color", Color) = (1,1,1,1)
		}
		SubShader{
			Tags 
			{
				"RenderType" = "Opaque"
				"RenderPipeline" = "UniversalRenderPipeline"
			}
			Pass{
				//1
				HLSLPROGRAM
				#pragma vertex Vertex
				#pragma fragment Pixel
				//2
				#pragma multi_compile_instancing
	
				#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
			
				//使用CBUFFER_START(UnityPerMaterial)shader可以使用SRPBatcher
				//CBUFFER_START(UnityPerMaterial)
					//float4 _Color
				//CBUFFER_END(UnityPerMaterial)
				
				//下面这种可以在不能使用SRPBatcher的情况下使用GPUInstancing
				UNITY_INSTANCING_BUFFER_START(UnityPerMaterial)
					UNITY_DEFINE_INSTANCED_PROP(float4, _Color)
				UNITY_INSTANCING_BUFFER_END(UnityPerMaterial)
				
				struct vertexInput{
					float4 vertex : POSITION;
					//对象索引
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};
				
				struct vertexOutput
				{
					float4 pos : SV_POSITION;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};
	
				vertexOutput vertex(vertexInput v)
				{
					vertexOutput o;
					//这将从输入中提取到索引地址，并把其存储到其他实例化宏所依赖的全局静态变量中
					UNITY_SETUP_INSTANCE_ID(v);
					UNITY_TRANSFER_INSTANCE_ID(v, o);
					o.pos = TransformObjectToHClip(v.vertex.xyz);
					return o;
				}
				
				float4 Pixel(vertexOutput i) : SV_TARGET
				{
					UNITY_SETUP_INSTANCE_ID(i)
					return UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Color);
				}
	
				ENDHLSL
			}
		}
	}


